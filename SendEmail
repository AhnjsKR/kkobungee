"""
KKOBUNGEE
"""

__author__ = "AhnJungSun"
__version__ = "0.6.0"
__license__ = "NONE"

import requests
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from bs4 import BeautifulSoup
from datetime import datetime


def get_weather(api_key, city):
    base_url = "http://api.openweathermap.org/data/2.5/weather"
    params = {
        'q': city,
        'appid': api_key,
        'units': 'metric'  # You can change this to 'imperial' for Fahrenheit
    }
    response = requests.get(base_url, params=params)
    data = response.json()

    if response.status_code == 200:
        weather_description = data['weather'][0]['description']
        temperature = data['main']['temp']
        humidity = data['main']['humidity']
        return f"오늘의 서울 날씨: {weather_description}\n온도 : {temperature}°C'\n습도 :{humidity}%"
    else:
        return '날씨 정보를 가져오는 데 실패했습니다.'


def get_news():
    url = "https://news.naver.com/main/list.nhn?mode=LSD&mid=sec&sid1=100"
    response = requests.get(url)
    html = response.text
    soup = BeautifulSoup(html, 'html.parser')

    articles = soup.select('.list_body > ul > li > dl')

    news_list = []
    for article in articles:
        title = article.select_one('dt:not(.photo) > a').text
        link = article.select_one('dt:not(.photo) > a')['href']
        summary = article.select_one('dd').text.strip()
        news_list.append({'title': title, 'link': link, 'summary': summary})

    return news_list

def lunch_recommendation(api_key, city):
    base_url = "http://api.openweathermap.org/data/2.5/weather"
    params = {
        'q': city,
        'appid': api_key,
        'units' : 'metric'
    }
    response = requests.get(base_url, params=params)
    data = response.json()

    if response.status_code ==200:
        temperature = data['main']['temp']

        if temperature <10:
            return "온도가 많이 내려갔네요. 오늘은 따뜻한 국물 요리가 어떠세요?"
        elif 10 <= temperature < 25:
            return "오늘은 가볍게 샐러드나 샌드위치가 어떨까요?"
        else:
            return "오늘은 유난히 덥네요! 시원한 냉면, 콩국수등을 먹는 건 어떨까요?"
    else:
        return '날씨 정보를 가져오는 데 실패했습니다.'

def send_email(sender_email, receiver_email, app_password, subject, text, html):
    message = MIMEMultipart("alternative")
    message["Subject"] = subject
    message["From"] = sender_email
    message["To"] = receiver_email

    part1 = MIMEText(text, "plain")
    part2 = MIMEText(html, "html")

    message.attach(part1)
    message.attach(part2)

    with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
        server.login(sender_email, app_password)
        server.sendmail(sender_email, receiver_email, message.as_string())


def send_weather_and_news_email(sender_email, receiver_email, app_password, weather_info, news_list, lunch_recommendation_info):
    current_date = datetime.now().strftime("%Y-%m-%d")
    subject = f"{current_date} 오늘의 날씨 및 주요 뉴스"
    text = f"오늘도 좋은 하루 보내세요!\n\n날씨 정보:\n{weather_info}\n\n"
    text += "오늘의 주요 뉴스:\n"
    for news in news_list:
        text += f"{news['title']}\nLink: {news['link']}\nSummary: {news['summary']}\n\n"
    text += f"점심 메뉴 추천:\n{lunch_recommendation_info}\n"
    html = f"<html><body><p>오늘도 좋은 하루 보내세요!<br><br>날씨 정보:<br>{weather_info}</p>"
    html += "<p>오늘의 주요 뉴스:</p><ul>"
    for news in news_list:
        html += f"<li><a href='{news['link']}'>{news['title']}</a></li>"
    
    html += f"<ul><p>점심 메뉴 추천:</p><p>{lunch_recommendation_info}</p></body><html>"

    send_email(sender_email, receiver_email, app_password, subject, text, html)


if __name__ == "__main__":
    sender_email = "kkobung82@gmail.com" #발신자 꼬붕이 메일
    receiver_email = "" #수신자 메일들
    app_password = ""
    api_key = ""  # Replace with your actual API key
    city = "Seoul"  # Replace with the city for which you want the weather information

    weather_info = get_weather(api_key, city)
    news_list = get_news()
    lunch_recommendation_info = lunch_recommendation(api_key, city)


 #메일 보내기
    def sendmail():
        weather_info = get_weather(api_key, city)
        news_list = get_news()
        lunch_recommendation_info = lunch_recommendation(api_key, city)
    sendemail(sender_email, receiver_email, app_password, weather_info, news_list, lunch_recommendation_info)

    schedule.every().day.at("7:00").do(sendmail)

    while True:
        schedule.run_pending()
        time.sleep(1)

